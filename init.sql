--
-- PostgreSQL database dump
--

-- Dumped from database version 15.2 (Debian 15.2-1.pgdg110+1)
-- Dumped by pg_dump version 15.2 (Debian 15.2-1.pgdg110+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: enum_transcripts_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.enum_transcripts_status AS ENUM (
    'queued',
    'not queued',
    'requeued'
);


ALTER TYPE public.enum_transcripts_status OWNER TO postgres;

--
-- Name: enum_users_permissions; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.enum_users_permissions AS ENUM (
    'reviewer',
    'admin'
);


ALTER TYPE public.enum_users_permissions OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: reviews; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.reviews (
    id integer NOT NULL,
    "claimedAt" timestamp with time zone,
    "submittedAt" timestamp with time zone,
    "mergedAt" timestamp with time zone,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    "userId" integer,
    "transcriptId" integer
);


ALTER TABLE public.reviews OWNER TO postgres;

--
-- Name: reviews_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.reviews_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.reviews_id_seq OWNER TO postgres;

--
-- Name: reviews_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.reviews_id_seq OWNED BY public.reviews.id;


--
-- Name: transcripts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.transcripts (
    id integer NOT NULL,
    content json,
    "originalContent" json NOT NULL,
    "transcriptHash" character varying(255) NOT NULL,
    status public.enum_transcripts_status DEFAULT 'queued'::public.enum_transcripts_status NOT NULL,
    "archivedAt" timestamp with time zone,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL,
    "archivedBy" integer
);


ALTER TABLE public.transcripts OWNER TO postgres;

--
-- Name: transcripts_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.transcripts_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.transcripts_id_seq OWNER TO postgres;

--
-- Name: transcripts_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.transcripts_id_seq OWNED BY public.transcripts.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id integer NOT NULL,
    "githubUsername" character varying(255) NOT NULL,
    "authToken" character varying(255),
    permissions public.enum_users_permissions DEFAULT 'reviewer'::public.enum_users_permissions NOT NULL,
    "archivedAt" timestamp with time zone,
    "createdAt" timestamp with time zone NOT NULL,
    "updatedAt" timestamp with time zone NOT NULL
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: reviews id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews ALTER COLUMN id SET DEFAULT nextval('public.reviews_id_seq'::regclass);


--
-- Name: transcripts id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transcripts ALTER COLUMN id SET DEFAULT nextval('public.transcripts_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Data for Name: reviews; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.reviews (id, "claimedAt", "submittedAt", "mergedAt", "createdAt", "updatedAt", "userId", "transcriptId") FROM stdin;
2	\N	\N	\N	2023-03-08 20:24:57.718+00	2023-03-08 20:24:57.718+00	1	\N
3	\N	\N	\N	2023-03-08 20:25:39.023+00	2023-03-08 20:25:39.023+00	1	\N
4	\N	\N	\N	2023-03-08 20:25:40.719+00	2023-03-08 20:25:40.719+00	1	\N
5	\N	\N	\N	2023-04-13 20:13:40.765+00	2023-04-13 20:13:40.765+00	5	1
6	\N	\N	\N	2023-04-13 21:27:29.139+00	2023-04-13 21:27:29.139+00	5	1
7	\N	\N	\N	2023-04-13 21:27:51.042+00	2023-04-13 21:27:51.042+00	5	2
8	\N	\N	\N	2023-04-13 21:28:46.708+00	2023-04-13 21:28:46.708+00	5	2
9	\N	\N	\N	2023-04-14 00:01:55.59+00	2023-04-14 00:01:55.59+00	5	2
10	\N	\N	\N	2023-04-14 14:35:51.089+00	2023-04-14 14:35:51.089+00	4	1
11	\N	\N	\N	2023-04-15 19:01:27.994+00	2023-04-15 19:01:27.994+00	5	2
12	\N	\N	\N	2023-04-15 19:16:22.062+00	2023-04-15 19:16:22.062+00	5	1
13	\N	\N	\N	2023-04-15 19:17:42.593+00	2023-04-15 19:17:42.593+00	5	2
14	\N	\N	\N	2023-04-16 00:52:29.432+00	2023-04-16 00:52:29.432+00	5	2
\.


--
-- Data for Name: transcripts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.transcripts (id, content, "originalContent", "transcriptHash", status, "archivedAt", "createdAt", "updatedAt", "archivedBy") FROM stdin;
1	{"title":"SLP455 Anant Tapadia - Single Sig or Multi Sig?","transcript_by":"masterchief164 via TBTBTC v1.0.0\\n","categories":["podcast"],"tags":"['multisig']","speakers":["Stephan Livera","Anant Tapadia"],"date":"2023-03-03T14:30:19.710Z","media":"https://anchor.fm/s/7d083a4/podcast/play/64348045/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2023-1-1%2Ff7fafb12-9441-7d85-d557-e9e5d18ab788.mp3","body":" Hi, you're listening to Stefan Le Verapodcast, a show about Bitcoin and Austrian economic expertise by Swan Bitcoin. Today we're exploring whether you should use single signature or multi signature for your bigger hotling stack. Now of course for day to day spending or certain specific scenarios you may not be thinking about multi-seek but here we're talking more about your hotling and my guest today is an art tapadea from Bit Hive and their team behind Hexawollet and recently Kipper. This show is brought to you by Swan Bitcoin, the easy way to buy Bitcoin and also learn about Bitcoin. Are you looking to add Bitcoin to your corporate balance sheet? It's never been easier with Swan Bitcoin, Treasury Solutions. With Swan Bitcoin Treasury, you can automate your Bitcoin investment, custody and management strategy and you will get expert guidance every step along the way. Now if you are operating a business and you have employees, consider Swan's Bitcoin benefit plan. So basically you can pick an amount and give that to your employees and this makes it easier for you to recruit reward, retain top talent. Swan handles all the heavy lifting like creating worlds, converting currency, routing payments and like magic your employees receive Bitcoin and world class financial education monthly as a benefit from you. So if you're interested go to swan.com slash business. On L2 is a community for Bitcoin builders by Blockstream. This is an initiative and community led effort by contributors and companies building on core lightning and the liquid network. It's an interactive community platform. So if you are a builder, whether you are a product manager, a designer or an engineer, you can come together through events. There will be mentorship programs available to fast track your success and also a community space to learn something new alongside other Bitcoin is building the future of Bitcoin layer two. Sign up now for early access on the platform. It's build on L2.com. Are you still using a plain old Block Explorer? Mimple.space shows you the multi-layer ecosystem of Bitcoin. Mimple.space is a comprehensive Bitcoin explorer that covers this ecosystem from the Mimple to the blockchain to secondly networks like the lightning network. With Mimple.space, there's no need to trust the third party. It's free and open source. You can host it yourself with one click on various full-node distributions. Now if you are with an enterprise, remember Mimple.space offers custom Mimple instances you can have your company's branding, increased API limits and so much more. Go find out over at mimple.space slash enterprise. And now onto the show with Unant. Anant, welcome back to the show. Yes, you've earned. Thanks for coming in. So there's been a lot going on. I think the conversation around learning to self-custodies always an important wine. It's always one that's very fresh on my mind as well. And so we're seeing a lot of discussion. I think recently of course there was the news about Luke Dashia losing his coins. I think I don't know exactly how many but probably something in the range of 200 Bitcoin. So a series of anacorn. And so there's been a lot of people making some noise about this statement. Right? They've been saying, oh, look, even if a Bitcoin core developer couldn't secure his coins and what hope does the average person have? They've been saying this kind of narrative. Of course, I disagree with that strongly. So I wonder how are you think about that? See, self-custody, I would not like to claim that self-custody is, you know, the mentally the easiest things to do. It is a new way to secure your stuff. So it is going to be, there are mental hurdles where people are trying to do it. There are going to be new things that people have to learn. And it does not come without self-responsibility. So no matter how developers and builders want to make it easier, it doesn't come without learning and it doesn't come without self-responsibility. Having said that and having understood that this is journey even five years done in the last event, we'll be talking about self-custody. And why self-custody, what other things can make self-custody more secure like them, any word proposal or any new, odd court people are proposing. So there will always be improvements in self-custody. And the new one, you can see words that we use, that was not obvious there. So what I'm trying to say is that the self-custody is a journey. There is no perfect self-custody solution. And also self-custody solution is very personal. So in case of specifically the incident you're talking about, it is very specific and a very, very niche case. It's not going to, it's to, it doesn't really, it is more for foot. It doesn't really apply to normal users. No one is going to probably have like a custom security solution like he had. It's almost non-issue for regular horrors. But he has there is an aspect of if a start questioning okay, is there self-custody solution proper? Is it, you know, there is something more than they can do about it and you know the whole conversation starts again. And this is going to happen again and again. But as you will me know and what I've understood from that situation, most of it was honestly, it is more preferred because I don't know if there was even a core storage gailing work, the way we term core storage air gap storage. So there are moving parts and it is a developing story. We don't know how the details are. So once we know all the details are fit, probably there will be some learnings out of it. But we already know that you know you shouldn't roll your own self-custody solution to be being stuff that is very custom-pre- yourself and it is not really something with people who have used and tried and have to be not tried and tested. So these are the few things that you can already talk about that incident. So to the whole question around should people self-custody, what we end up having is a lot of conversation around what is the best way, right? We see people saying, oh just, you know, multi-signature is too complex. People say things like you should only do single signature with a pass phrase. That seems to be if I had to assess, let's say the meta on Bitcoin Twitter or online discussion, that seems to be the meta. They say, oh multi-sign, it is in the too hard basket for most people. Obviously, I disagree again. I think it is more like, you know, if you are a beginner, you should use maybe a guided solution, like have a professional help you. And intermediates and advanced level people you can learn. It is not that hard. I'm saying it. I'm curious how you see it, like single signature or multi-signature. See, we first of all, as you know, RSTs have been making the Bitcoin products for a while and we come from a single-signature word. Exhausted is a single-signature solution. It has all the aspects of typical-signature solution or what a wallet does. And we can come to the deconstruction of the wallet which will probably really help some of the listeners. But essentially, we come from that space. So definitely a very neat solution for people who are just getting started or people who have, you know, you know, small amount of money, obviously that is subjected. But essentially, you know, not like life savings or stuff like that. But when it comes to something that you want to hold for a long term, right? You don't want to hold it for six months and just trade it off. And you want to, and it is a significant amount of wealth, multi-signature, customer-tisic solution is definitely something you should consider. Consider it, understand it, and then probably you can strip take a call that you know for me, single-signature, with the hardware wallet and past decision. That's a fair thing. If you have a safe or if you have a place where you can keep your hardware wallet and you are 100% sure less than you want is going to have a touch it. And here is I will do automatically if you get it out. Then probably, you know, that might be the solution for you. So my message for a lot of people who are talking, so I talked a lot of single-signature people and while you are building, keep it over the last one, you have been talking to a lot of people who are interested in my statistics. So I do know both sides of the argument. So my message for everyone who have significant wealth and what have voted for long-term is actually considered it properly and then take a call. And what I have seen is a lot of people who consider malicious properly, right and look at a guided solution like a reserved and the way we have built keeper, they actually come to appreciate monetization. And so I think what we see is a lot of discussion about the complexity, the added complexity, the backups aspect, the dealing with, let's say if you are trying to do it, you know, the right way or the proper way with different hardware devices and so on. I can understand, there's a little bit of extra complexity, but I think my thinking on this is guided more by my friend Michael Flaxman, I think he's coming from that. He's more of a, in the multi-sign maxi camp and I think his view is like, it gives you fault tolerance, right? It gives you this extra level of security. You just need to know how to do the backup correctly. And you have to do certain things in the right way in the basic way that you get these basics right. And then once you get those right, you are just so much more secure. So that's how I'm seeing it. So if you were advising somebody and let's say this person is now an intermediate or advanced level, you know, they're not a beginner anymore. They're quite comfortable with their single signature setup. Why should they consider a multi-sign in your, in your view? See, I think you, you mentioned it correctly is that the security guarantees of resilience your tolerance that multi-sign offers you. You don't really get that basic technique. Okay, you can add pastries to it. It adds a little bit of resilience in terms of attack vector, but it also adds another single point of failure. So it's not really people try to recreate the multi-sign using a combination of pastries and single-sign and, you know, kind of keeping multiple copies of it. But essentially the real, the real optionality or the resilience that multi-sign gives you that those security guarantees you cannot get with single-sign. Right? And some of the things people see, when you do single-sign, if you really break down single-sign, if you deconstruct what simply happens in a single-sign, then you would realize that actually single-sign, the attack vectors or the places where you can get attacked for a fun-gen single-sign, actually is the same as multi-sign, while in multi-sign, you have multiple entities. So you can minimize the trust. Right? Let me try and explain that a little more. So let's take a single-sign and deconstruct it. So there are essentially just four key aspects to the whole system. So the first step really is to finish the user would generate an interview, right? That's the first step. The second step is a second part of it, the step of it is how is that backed up? So there's an interview. It is backed up. Then the third step is from the interview, public and private keys are created, right? Public keys are used for receiving funds and balance checking in all that, which we typically call it wallet functions. And the fourth category is the signing part of it which is done by private keys. Now if you look at these four functions, these four functions can actually be performed by completely separate entities. Okay, let's take an example. So entropy generation, you can use a simple dice roll or seed picker or something as to generate the entropy. It doesn't involve any wallet or any hardware device. You can use them as a but that's an example. Then you could go away and store that entropy in terms of seed words on a metal seed bread, right? So you could use a mobile device as a watch only, watch only wallet with the expo. And you could receive funds on that. While you could put, you know, use a seed signer which is a state device. You could put the seed in a delivery and you're signing in or using the seed QR and do the signing from that device. So what you see here is that there are four parts to it which are completely, can be handling different ways. Right? What happens in typical, typical wallet is some of these functions or a lot of these functions are combined together. And in the simplest case, I would have one app which just the entropy generation, it does the backup, which does the receiving part and which also signs the turn. This is the simplest one, simplest mobile app. The most common, what we see is the interface that other than the backup, all the three functions are combined in the typical mobile app. So for example, ExhaVolette would generate the entropy, you would store a copy of it separately and then the receiving of funds and the balance taken all that wallet functions and the signing happens from within the same one. So if you see these three functions are combined in different ways to give rise to different solutions. Right? All of these situations, the wallet which is used for signing or which is used for receiving funds, they are the places where there can be some, you know, attacks or there can be some vulnerabilities. For example, if during the receiving part, the wallet might simply stay in the receiver address. If you don't check it, then the funds if I'm receiving funds from you, I should not address that I think is mine, but it is someone else's company legal. Right? So ExhaVolette shows you wrong address and you send money to that money is completely gone. Now, let's bring this multi-segan. The same four things happen in multi-segan, but with four of these multiple of these keys combined. Now, these functions that there are different like the example you look of multiple vendors, like multiple vendors are involved, you could actually, by following some simple thumb simple thumb rule, you can actually check that receiving address, let's say in two of the entities. And you're so much safer. There's not a single wallet which cannot attack and change your receiver address. If you check the receiver address on the wallet and maybe one of the hardware device, it will be really difficult for someone to actually collude across those two systems and, you know, steal your funds. So I'm going into the real details of it, but if you're really abstracted way back up again, the trust is the really can minimize the trust across multiple vendors and multiple locations and multiple platforms. If you use a multi-segan store of a single set. Right. And I think that's a really important point to understand. And when we have multi-segan, it just gives us this whole new level of being able to check things. So for example, we can design things in such a way and I know, you know, step on is not as step on Snidgeriv. He is not as, you know, actively contributing in the space nowadays, but I think he was popularizing this idea of how can I make a wallet or something where even if the coordinator was lying, it could, you know, or how can I set something up where even one of the devices is lying, I'm still safe. And so in a multi-segan context, it gives you that full tolerance, right? Because now the coordinating software, whether that's, you know, a specter, desktop or sparrow or it's, you know, unchained capital or it's nunchuck or it's keeper, which at whatever that cool, even if the coordinator app is lying to you, if you're checking that transaction on the device or in the case of receiving, you are checking your receive address on the actual device, then you are whole, another level safer because it's much hard for somebody to compromise you and steal your coins, and then this becomes very valuable once we're talking about your life savings or even for a corporate context or a fund or a trust or any of these business entities or other legal entities that need that have a very high security requirement. So I think it's such an important thing, but some of the main hurdles, let's say, that for most people, what would you say are some of the main hurdles that people have to using multi-sick? Like so I'm sure you've had many conversations with people who are probably doing single-sick or just single-sick with a passphrase, what kind of excuse do they give you or reason do they tell you, this is why I don't want to do multi-sick? Yeah, so to like our student there is definitely a learning curve, then there is a learning curve and you come to Bitcoin, self-custody itself is a learning curve, and then self-custody multi-sick is definitely a, you know, steeper learning curve than just because there's a lot of education available around, you know, how to backup seed phrases and how to use a simple synemic water. And in this case of single-sick wallet, if you just listen to like a 500, think you would understand, but in case of multi-sick, yes, it is operationally more difficult, you have to ensure more things, it does, but that does give you an order of magnitude better security like we explained, it's simply impossible for one key, one coordinating app to cool you with another hardware manufacturer and maybe one more other hardware manufacturer, even somewhere across the globe to steal just your coins. So it's almost, it's it is very difficult, it's sort of magnitude difficult. So coming back to the problem to the hard decision that this is this operational difficulty is one, right? And that is why it is very important that this is kind of guided process, it's not like you can, you are trying to do it with a command line, but there's some going to visor some kind of guided process, it takes you through different steps. As you have to every step, okay, what does this mean? Maybe do this, go into the hardware wallet at this particular place and then then try to extract the expover something like that. So there's a guided process, yes, it will be slightly longer, but it will be hand held in such a way that the operational part of it becomes not that much difficult. So that's one of the excuses, not excuses, that's in it's a reason, let's say it to be fair to them, right? Not an excuse, let's say a reason. See, well I was talking to one of the guys who was in, in advertising, he's a very creative, he loves Bitcoin, he loves the idea of it, but he just doesn't have the time to you know, understand, multi-sick beyond, he, he, he, he, he, forgetting oneself, because he was a few years to getting one, let's say good thing, probably, another few years, which is to be again to be fair to him, he is busy, he's doing this creative stuff, he's not really, it doesn't have the time on the condition to learn about multi-sick. So that is a general reason, but that's why products that we are, you know, the we are building a lot of people are building nowadays, the cotton things of theirs are actually, you know, it's a little kind of an assisted multi-sick. So that's one, the second is the cost, the cost is definitely a factor. So if you do a 305 multi-sick, it might be, you know, somewhere around 500 dollars for you, that's probably a good 305 multi-sick, you can probably reduce the cost by trying out some combinations or using some soft software-based keys instead of hardware-based keys, and if you use some of these keys, it is quite okay in terms of security. So there's a cost to it, the costs can come down by, you know, decent combinations plus there are a lot of people, a lot of companies who are trying to build products which are lower costs like taps and is like jade, like there are few other auditors, so the costs are going to come down. So these two, similar to main hurdles are hard, and the codenading software are trying to, you know, do our assisted multi-sick, while hardware modern manufacturers are trying to reduce the cost. So hopefully, this is going to become easier to be easier. Yeah, and you know, it may be, it may be a question of, another cycle or two, for the multi-sick user experience to get better and popularized this further, I'm bullish on this, though, I do believe it'll come maybe in a cycle or two, because once you have a lot of people who have a lot of value in, in fiat terms, purchasing power of terms, it'll just be so much more applicable for them, but I certainly appreciate that today there are some operational difficulties, you have to think about, okay, is it more difficult to use these different wallets, right, as opposed to just having one coder or one device or whatever you're using? Now you might have to think, okay, I need you to know how to use a coder and, you know, a seed signer and a tap signer and a coba or a keystone rather, you know, whatever pick your mix and not just that, whoever is recovering your coins, right? Because now we've also got to think about, okay, you or me, and aren't, you and I could probably figure it out, like even, you know, but can out wives and kids figure this out? You know, that's like, that's like the other level too, right? Yeah, absolutely, that is very standardization, really helps. If you talk about learning, how to use different how do you want it or signing devices, then if it is a standard way that those devices work, it is much more easier, right? Probably if you learn one of them properly, you can use one other one, same as, you know, using a phone. If you use one type of phone, there's a good channel that, you know, whether you're a learning, you can use another phone because they have been adopted or not and there are some basic basic, you know, assumptions of basic capabilities that have been developed. So if there is more standardization around how these things are used, then definitely it's going to get easier and easier, right? So we have ESBT standard, we have, you know, the bibs, we have, we have the, you know, more very importantly, product distributors, output descriptors and ESM S and all these good standards, which are developing, which is going to make this learning easier because if you learn it for one device, you will probably learn another device. So that's that all these things are going to be done. Yeah, sure. And so let's talk a little bit about the multi-seq set up process, right? Just so people understand what's going on there, right? So let's just keep it simple, right? Let's just say it's a two or three with three different device types and where coordinating that. What are some of the different steps involved to set up this multi-seq and operate that multi-seq? So let's go back to the brief construction of the earlier, right? And it is going to be exactly the same. First there is a step of generating the entropy. In this case, as there are three devices, you will generate it in three different places. Now this itself is going to give you, you know, you know, you know, seeing the product failure, but let's say you have a laser, a cold car and let's say, Jade, of a seed signer. When you initialize those devices, you can use, you can use an existing, you know, like a seed phase, you might have or you can generate a new one from those devices. You think you want to have past phase there. So now what you've done is you have three devices who have generated different entropy. Okay, so that piece is done. Then entropy generation was the first piece. Now how do you back it up? You can back it up as a device itself. For example, you just want to take care of the device and put it in a save. And additionally, furthermore, you can actually put them the seed words in a written format on steam and keep it somewhere else. So that the backup step is taken care of. Now you have three devices ready and they're backup secured. The two steps are done. Now what you would do is you would take those devices to an app like keeper. You would create the multi-save. What creation of multi-save that really step means is multi-save is not really created at that point, but the path, but you, your wallet has the capability of generating the addresses which can be signed with a script, which is a two of three from these three words. So what you would do is you would communicate with these three hardware volets, either through NFC or QR code and fasten the X-pop relevant X-pop to the code in it. So now the code in it is software only has the X-pop, which is which are the public key generators, which is the public key generator. It still doesn't have any control of the priority. Yep. So just to be clear, this is like there's a special menu in some cases, right? Because it's not necessarily the same as the one that you would use for that device in single signature mode. So for example in code code you go into settings and you have multi-signature export. I think it's in advanced or settings and in there you go to multi-save export, take that up into a SD card, put that in and then the coordinator app has to sort of take all of those three. So exactly, so I think that's an important step because single-save and multi-save from the hardware different standards. So it is good to use the right X-in-right X-pop in the right path. So you would go into the settings and you would follow the steps to import these three X-pop from these three devices. And when you do that you can do that through an SD card in keeper, you know you can use NFC, or code and stuff like that. So that's slightly more secure and operational easier. You don't really need another computer to get in the middle. So that's what you would do. Now your coordinating software has all the necessary pieces to make sure that you can, you know, produce addresses which are which can be signed by that script. So that is the creation part. Now the sending part is let's start with the story. At this point we also do need to, once you've created that multi-sign, then we need to register the qualms into those devices. Right? So that's the other step where you, now the coordinating software with a specter or a sparrow or keeper will give you a little piece of information which again you either use with a SD card or you do the QR scan back and forth. And then those devices can now register and understand are these are the other devices in my multi-sign. So let's say, you know, I've got this code card and I know that okay there's a a seed signer in my qualm and a keystone or whatever other device. And then you have to, well, theoretically, like if you want to be really secure you want to check are okay and you can read on the device. These are the other X-pop associated for this device. So you can kind of check everything, make sure it's all, you know, matching up. Yeah, so I was trying to explain the received journey so that it is easier to understand why registration is needed. Right? So absolutely important that registration step but why it is needed is because how does receive happen is the coordinating software takes these X-pops completely independently of hardware wallets and it will show you a particular receiver address and you would, you know, one way of doing it, you just send money to that receiver address and you will have fun. If the coordinating software is not trying to be, you know, be trying to steal your forms. Then when you are signing it, you know, sending transaction in a, you know, you know, happy case scenario. You would, the coordinating software will build the transaction of, right? Using using the details that it has, it will construct a PSP, something called PSBT, which is partially sent with transaction is just a format of how transaction is represented with a rational data and then it communicates again by NFC or Bluetooth or QR code with these hardware devices, right? Or signing devices and they would sign these transactions. Now there are few things which can go wrong here and that's why you, a curriculum and general registration step. Then because the coordinating software has the central role of combining the expo, it has the central role of receive generating the PSBT, which, you know, a signed device would sign what if the coordinating software is trying to cheat? What if the coordinating software is trying to manipulate these things though it doesn't have the private keys, but it can manipulate the signing devices to sign the wrong PSBT or, you know, you know, give them the wrong address. So that is where the registration step is super important. As you described it well, registration basically means the coordinating software is saying, by the way, this is the policy, wallet policy or the, or the, or the multi-seconfiguration I'm trying to do. Do you want to store those details and at this step the user would look at the details that is getting stored, they would probably call it code storage or they would probably call it, you know, say for what, or what are they going to call it and then they would store that in their signing devices. Now what is happening? You have created multiple copies of the same configuration, right? So next time when signing or receiving happens, coordinating app cannot cheat you independently, you can always have, you all, you still have three other entities that you can check and say, okay, there is something wrong here. So registration is a super important step, which lets the signing devices independently verify. They're okay, you know, if, if coordinating app, or any of the other signing devices is trying to cheat on them. So that's, that's essential, you know, fundamentally benefit of. Yeah, right. And then so as we're going through and we're checking. So, you know, just just making sure I'm summarizing everything. So we had our three devices, we've initialized all three of them. We, we either brought or did our own entry, or we used the device entropy to create a 24 word seed or a 12 word seed, then we ingest the multi-sec x-pop out of those three into the coordinator. Now the coordinator has the built together policy. Let's say two or three. Now we register the core into each of those devices. So now each of those devices knows the other device. And then you, the human should obviously be checking that and making sure, okay, x-pop, okay, it matches to the other x-pop. There's no lying here. There's no, you know, everything matches up. Everything's good. I've got my two or three. Yes, take that. And now what's next? So we'll now we can receive, let's say, a test, a small amount of coin into this wallet. And you can check that on multiple devices, right? Because some of these devices have an address explorer, which is really useful. It's a great feature because now you can see it on device one. You can see it on device two and device three. Or maybe what you do is you would check a quorum of the devices, right? Maybe if you're running a two or three, you might check it on two of the devices. And then see, okay, on the coordinator, it's also showing the same address. Okay, good. Now I can receive some coin into this address, right? Absolutely. So testing, even if you, you know, buy a new card, testing it out for us for a trial run is always, there's nothing, it cannot go wrong. So testing it the way you set is a great idea and we recommend it. And testing it for sending and receiving and doing, you know, small bits here and there is definitely something user should do before they transfer more of their fund. There are a few checks. These, that these signed devices do automatically. For example, the change address, when you're receiving funds, there is, there is just single single letters. But when you're sending funds, there is an address that you send to, but any of that change because you take so it's like a single piece, that when the it utics a breaks, a piece of it comes back to your change address. Now there is a potential with the coordinating ass, according to software, just, you know, manipulates and puts their own change address. So this change address is something that any of the devices which have been registered properly can take automatically. The user doesn't have to manually check it. That's a very neat feature and a very simple thing because the change address is incorrect, the, the, the CSI device will simply not sign it. So that's, that's a kind of a check under the hood that happens, because only because there are multiple devices and you register with them. So that's pretty neat. That may not happen in a single single, say, where you're just using a mobile mobile app and you have just, you have your seed case, return down somewhere. So these are the, these are, this is an, you know, some of the addition benefits. Yeah, and the reason we mentioned this as well is because they have been some attacks like this, disclosed, you know, historically. Now I'm not sure if the change one was necessarily used or exploited in the wild, but it was there for some time and then obviously manufacturer has found it, it got patched up and so on. And so now there's a much better, there's a much better awareness and understanding in the industry and I think the products, the software and the hardware are being built with this in mind, right? So that's, that's, that's useful. So what's next in the journey, let's say? So I think if you want, if you're really paranoid and if you really want to get to that level, there's one more step you could do. So what you've done, you have set it up, you have registered it, check the details, that's like the theoretical checking of it. Then you've done a practical piece where you actually send around funds and you have checked there, there's those funds are showing a propelier not. This one more step you could do is basically, there are now multiple coordinating software as a result, right? You know, initially there was only a electron, like a electron, that's it. Nothing as you couldn't really know, another word others were closed source. So you couldn't do much, but with the help of, you know, in the returning the last year, there are many more. There's a sparrow, the spectra, the luncher, the skeeper, what you could do is recreate the world. Let's say you've created a two of three in keeper, you could take the output descriptors, which you can talk about in a little bit, but basically the wallet configuration, put it in sparrow, right? And check whether it is showing the same addresses. And when you're doing the testing at that time also, you can check the balance from sparrow and from keeper. You can try to send from sparrow and check it and keeper. So now what you have, you also have a redundancy or not redundancy, there is a network, but multiple places, you can check the coordinating software. Back to the show in a moment. Now as we're talking about multi signature, unchained can help you with multi signature. This is particularly important if you are a beginner and you need a guided pathway into multi-seek. With unchained capital, you can create a two of three vault where you hold two keys and unchained holds the third key. Now they can guide you into this process. They have a concierge onboarding program. You can pay up front. They will ship you some hardware devices if you need them and they will do a call with you and walk you through that process. An unchained have a really easy platform to use, which is perfect for you if you are a beginner and you just need some help to guide you through this process. They also have an inheritance checklist which comes as part of the concierge onboarding program so this can help you in terms of having things like a step-by-step checklist, letters for the executor or trustee and other things. Go to unchained.com slash concierge to get this. And finally, coincites.com, are my favorite producer of hardware signing devices. Most notably the cold card, but they have a range of products and gear that you will find really handy. With the cold card obviously it's one of the most popular Bitcoin hardware signing devices. You can use it in single signature or you can use it as part of a multi signature and it has all these features that really make it easy for you to do that. So you can register the multi signature forum. You can check the addresses on the device which gives you some more security. You can initialise the whole thing offline without even connecting to a computer. So there's so many features and it's such a reliable and versatile player that you can use as part of your Bitcoin security setup. Go to coincite.com, audio-cold cards and other gear there. Use code Lavera and you'll get a discount on your cold cards. Now back to the show. Yeah, I guess it's just an extra layer of verification, right? And certainly these are things that you do when you set up your multi-seagrant. And so I think this is a great way for people to give themselves that piece of mind as well because this is one of those things that's really kind of crazy but it's this idea that the keys can be ported are portable in a way that you can take the key like theoretically. I could have set up that same key in like a treasure but then imported into a cold card and it's going to sign the same way. It's going to sign the same coins in a way. So that's kind of useful and that's a step that people are doing to help verify. Okay, my access to my coins is, you know, or another one that people might do is do a test recovery, right? Like let me send you know $30 into this multi-seagrant and then just practice, oh I've lost one of the devices or I've lost this other thing, can I recover? You know, have I have I have the right pieces together to be able to recover? If something goes wrong and then this can give you that extra piece of mind. Okay, I was able to recover. Okay, I'm safe, right? That. And the best part is if you notice that every single user doesn't have to do this, if a lot of users have done it initially or you know some users do it regularly, then if any of these pieces, if any one of the coordinating software, any one of the hardware devices trying to do something funny, they'll be caught. So the incentive to actually try and steal funds when there are a lot of entities involved is actually reduced. So this is the very, very key part, see one of the things in Bitcoin we know is the securities also because of the numbers, right? Because there are so many private keys possible, it's not easy to guess them. It is not the same scale but the idea is if you have multiple entities, then you can minimize trust in any one of them. You don't need to test a-card endings of the user, no the one. I don't need to use a signing device, I can use another one, right? So as these things develop and we have like 12 or 13 signing devices available now of S5 or 6 coordinate or apps available now. So this becomes easier and easier and people will get more and more confident about it. There's a lot more talking about it, lot more education that includes about it, people who are listening to this podcast might come back with questions, they might feel slightly more comfortable. So things are converging with standard with the ecosystem and the education and I'm like you're like you're a server, I'm also a very bullish on policy. Yeah, yeah and so let's talk about spending now. So let's say I've set up my 203 and now I want to send some coins to you on our. So I say I'm asking me an address, I'm going to pay you you know 0.01 Bitcoin or whatever, what steps do I go through? Perfect. So if I give you an address and you have a two or three month as accept, the first thing to do is to check that address, I probably have you know I'm showing it showing it to you on a screen or I have you know message you that particular address. So when you when you put that address in your coordinating software and the coordinating software would probably take you know produce a B.S.B.T transaction, you would take it to your first hardware device. On that hardware device, the first thing is to make sure that you check whether that send to addresses character or not. That's the first step. The like I said, the change addresses automatically checked if that particular device is registered. Okay. So these are the two checks that happen during sending, if all the device are registered. So all you have to do because they're successfully registered. If you have chosen the right wallet from the from the signing device, then these are the these are the checks that happen. And I think maybe it's also so obviously in this case it's a two or three. So I'd have to go and let's say I have one device at home and then another device in a vault or some other location somewhere, I have to go to that other location and do a get the signature from that device or from that signing device to get the second signature, bring that back to you know the coordinating application. So in this case if it's cheaper or Spector or Sparrow or whatever and then once I've ingested that second PSBT signature, then it'll say, ah, this transaction is now valid and you can broadcast it, right? Absolutely. Yeah. I think you have to explain the user steps really well. So those are the checks that happen at one place, but then you take it to another location. The same kind of check you can do there. You can check there a saving address at your own office or any other location you have. Then you put it back to the coordinating software, not the coordinate software, because a specific transaction has been same and there's no way to further coordinating out because it doesn't have the private keys to change it. You can let the coordinating app, you know, broadcast the transaction. Right. And I think one other point just on practicality that might be useful for some people. I think I've been because I've been playing around with devices for years, right? So I think for me in practice I have found there are times where QR's can be difficult, right? So because the QR flow, like as an example, if your it depends on the device you're using, sometimes the resolution is bad or the the camera on the other devices bad. And so one tip that I've found useful is if you can have the QR scanning device, that could be maybe your home device. And then if you've got like one that's in a vault, as an example, and you might have a mix, right? You might have a mix in your core, and so then the devices in the vault maybe they can be a little bit easier to have a microSD for signing because they are a little, I think it depends on the flow, right? It depends on the coordinating app and everything, but if you just have a microSD card and you're just going into the vault area or into an office or somewhere, then maybe it's a little easier to kind of get the signature done because if you're kind of out in a remote location and you're trying to scan the QR and the signature is not working and things like this where it can be a bit difficult, right? So I think in that case it might be a little easier. Now of course there is NFC as well, so there's NFC devices, things like the the tap signer is an example, but I guess there is one downside with devices like the tap signer is you're getting less, yeah, because you can't check the addresses on this thing, you can't, there's less that you can check about the transaction. So, you know, there's tradeoffs with all of these things, it is a cheaper device, but I guess if you're storing serious, serious money, well then maybe you're going for the device, the bigger devices with a screen and with a keypad and things like this. So those are a few tips I guess that I would just offer for listeners as well, when you're thinking about if you're crafting your own multi-seg. Yeah, okay, so let's talk a little bit about the backups and the output descriptor and BSMS, can you decipher a little bit of this, at least, current state of play as we talk, you know, today's the 31st of January 2023, what's the current state of play with multi-seg and backups? See one thing, even I want to mention because it's a very important point, when you are keeping something in the shape, and you want to use as decar versus QR code, one of the things people forget is some of these devices used to not have a battery, right? So what you don't want to do is actually get that device back into your home and then do this stuff and then take it back, right? So if you have it in a safe, it is not about idea either that, you know, most of the new devices, that's where they have some kind of battery, the new ledgers, the G8, they have battery, or if you have like cold card, that requires a battery, this is not a battery, you just carry the battery with you. So carry the battery and as you can see, you can see, you can see, you know, just do the piece there, either through QR code or SD card and then come back, do not carry the sign, you don't have to carry the sign and do it back, you can keep it back to you. Right, yes, so just to explain there, so the idea here is let's say we've got a two or three multi-seag and just doing like a big amount of coin on this or whatever, the whole point is to not have to have like, okay, yes, at the start, when you set up that core, yes, all three devices can be in the same location because you haven't put any coins on there, but once you put coins on, then you don't want to bring them back together because theoretically you're vulnerable at that point, right? Like if a criminal or a someone comes to, you know, try to attack you at that point, you're vulnerable. Yes, even at creation actually because the way P is between multi-seagors is not really interactive that is, you can actually not have them at the same location, they need one of them. Right, yeah, of course, yeah, so you can do one important, you know, so it's one important, you know, one of the other, yeah, I mean, I was just saying more from a practicality because you might want to let's say you want to set it up and then test recovery, test with small amounts, before you separate the devices and put them into, you know, different locations, one in the mountain, one in the, you know, one in the vault, one in the office, one in the, you know, somewhere, so I think that's probably where I was saying that just from a practicality point of you, but then once they, once you put the coins on there, like serious coin on there, then you don't want to pull them together because now, you know, that's where the risk is. So anyway, we're spoken about that. Let's get back to the backup question. So, you know, typically this means you save a PDR for an output descriptor or BSMS, he tells what's the current state of play there. Yeah. So, so why do we need these, these output descriptors or work competitions because even if you have two of the three keys, you cannot recover your phone, right? I just want to repeat that in a multi-sick, if you let's say in a three or five multi-sick, it doesn't mean that if you have three of the five keys, you can completely, you can not completely, you cannot even recover any of your funds. The reason being is that, okay, you have the three keys to the safe, let's imagine another safe, right? So, you have three keys of the safe and you can open the safe, but how do you find that safe, right? How do you get to that safe? That is the map, you know, in that terms, is what the word configuration is and that word configuration or the multi-sick configuration finds contains the map details that it's basically contained, the other public details of the key that you would need to unlock your funds basically or get access to your funds. Just just to want to be clear why multi-sick configuration finds are so important. Now, that is where things like output descriptors and you know, BSMS and all these things come through. So, output descriptor is it's a very neat standard, it takes care of all the different aspects of what a configuration means. Configuration doesn't just mean the expo, also means the path and the script type that you're using and start writing them, right? So, that is what forms output descriptor in a simple sense, I'm not getting into time login multi-sick yet, but that's an output descriptor. And if you have the output descriptor and if you have the minimum number of keys, you can definitely access the funds. If you have three keys of the file, and you have the multi-sick configuration file or output descriptor, you do not need the other two keys. That's the importance of it. I'll put descriptor as a format, which a lot of wallets use. Now, there are like as a there are multiple pieces in there, like the expo of the path, the you know master fingerprint, the script type. So, these are the part of output descriptor. I would say an improvement to that is the BSMS, which is bit coin, secure, multi-sick setup, I think, but BSMS essentially has the output descriptors given a specific output descriptor template, but it also has some other details. One very neat detail that BSMS has is actually it has the first address of the multi-sick, right? I really like this part and why that is important. So, let's imagine you have these five devices. One of the option after registration is you go away and check all these five devices for all the expobs, all the paths and all the derivations in this and that. There's one we are going it. But, alternatively what you could do is you could, if it's a normal multi-sick, you can just check the first address, right? Because the first address is a derivation of all these components. So, if the first address is correct, or is it it's matching across the five devices, then there is no way they could have changed one of the expobs, or they could have changed one of the paths because they will not get the first receiving address. So, by checking one piece, you have to check, you have actually checked multiple of these, multiple of these items, right? As you were mentioning, the BSMS has the first address and so you were saying that basically because the first address has to be the same, then it's I guess you're saying that's the reason why you find it useful as a wallet developer when you're coding or making and building this, right? Even from a user point of view, instead of checking for like five different things, you have to check all the cosine and expobs, so you have to check five expobs, plus they'll have to check the five derivation paths, plus they will have to check the five you know script types, because any of this going wrong, where you mean that it's a completely different world. So, if instead of that what you could do, in a simple case, there are complex case where there doesn't apply, but in a simple case what that means is if you would check the first address, you essentially have to check all the input parameters to the first address. So, if I check this one address across the five device, I know it is the right registration. So, these are the kind of you know improvement that are happening from a standard point of view, and that is why I said the general standards are leading the world's better UX in the multi-six space. I say, yeah, okay, and so let's talk a little bit about capabilities specifically, let's talk a little bit about some of the, sorry, one other thing. So, with this whole output descriptor BSMS, I guess the important point just for people to remember is that you can keep multiple backups of this. Now, yes, it impacts your privacy, but it helps your redundancy and your ability to recover something goes wrong. So, this piece, this output descriptor, the BSMS, the wallet configuration file, whatever it's called, make sure you have multiple backups of that. You might even think about having a copy of that with your lawyer or someone who you're doing inheritance planning with because it'll be a central as part of the recovery process there. So, that's just something to keep in mind. One more thing you could prove in those files is which is very practicalist. If you have the same devices, let's say in a safe, you can keep a copy there. If you have like three devices in three safe, in three different locations, this keep one copy with each of them. So, even if you carry USB, one I mean, yeah, or you can just like have it in an PDF or something. So, that's a very practical way of doing it. What's some of the hardware, what's also doing this, when you're registering, this is very neat, when you're registering, you're actually giving those details to the hardware model. The example code code card lets you export that back. So, now, I don't need to store another copy of the word configuration with a code card if it's in a safe. I can use the same word configuration from code card to get that back. So, you know, things are becoming much easier. You're going to keep that separate, basically. Right, yeah, so it's even more redundant, see then. So, let's talk a little bit about the inheritance stuff because I know this is something you are looking at for a paper as well. So, what's the plan there? So, in here, it has the way we inheritance people looked in different ways. A lot of, you know, they extreme, because might say, okay, I don't care about the legal aspects of it. And I just want to make sure my coins are safe and I can pass it on. Some even believe that they just want to dive with their coins and just you don't have any to do it. I'm not of that looking in. I want to plan it for generations and I, you know, a lot of people want to do it that way. Once you have a few suggestions that you can look at, you would go to pass that well done for for generations. So, when you're bringing inheritance planning, there are two aspects to it. One is obviously that access to the keys. And then the second is the right to have the keys. Right? When it is about the right, it is the legal construct of your jurisdiction that you have the right to hold the keys. A lot of time, this aspect of the legal title or the rights to have the keys is messed up. What we want to do with keypad is try to be one, look at both these aspects and assist in both these things. Okay, if you, you know, if let's say your partner is going to get the coins up if something happens to you. And you have told them all the locations where you know, two of your three of your devices are then probably, you know, it's the access part of it is easy. But there is no reason that, you know, someone else after you are not there can claim that okay, that person has access to it, but actually that person is not the rightful owner. Then there would be an mix and you don't want to get the you know, get into that kind of situation. So, that is why, you know, having your legal title clear, it's very easy, it's not very complicated, is a very important way to secure thing and make it easy for your loved ones that they don't have to get into hassle of first figuring out where the keys are and then also trying to prove that why you know those keys belong to them. Why you're the rightful owner or air of those coins. Exactly. So, these are the two aspects what keeper does is obviously it tells you what of the safeguarding tips like we talked about using a battery using the SD card of how to secure your keys and not just for yourself, you might remember the pin, but what about if someone else your kids are trying to access with would they know the pin. So, it gives you a lot of safeguarding tips of how to secure your keys, not just for yourself, even for future generations and that's the access part of it. It also helps you identify those that particular wallet or the multi-seq wallet in a very unique way so that you can you know put a simple part of your will that okay, you know, I have funds in this particular multi-seq and this is how you identify this multi-seq and anyone, you know, this person, XYZ is actually the rightful owner of them. How do they get access, it doesn't have to be put in the wheel at all so that you know, if you don't want to trust your lawyer or the guy who is right in the wheel, you don't have to put the access part there at all but you do have to put how you can uniquely identify those things and how that particular fund belongs to there. Yeah, I mean there's all these privacy concerns aspects of it too because there are people who might say I don't want to disclose, you know, how many coins I have or whatever. So, some of that is going to be a little bit you have to find a way. So, we have actually we have been actually we think we have found a way and we've been talking to a lot of lawyers and a lot of people in this space how this makes sense and we've got we've got great feedback on that. So, what you put in the put in the put in the put wheel, doesn't have to it doesn't have to be the experts, you don't really need to put the experts, you can put your master fingerprint there, you can put some other DJs there which doesn't leak privacy at all. So, there are some other ways of establishing the uniqueness basically what you want to do at the end of it is in the will if there is an air who is uniquely identified that this is the this is the legal name, this is where the labor those kind of details and you have uniquely identified or as best as possible, uniquely identified which funds. Then essentially you can, you know that's all that will need. So, using other methods other you know that then putting experts is you know they to get across the conversation. Gotcha yeah and certainly as I mentioned for like some people might be comfortable with maybe giving like an output descriptor to a lawyer but other people very much not but of course people should just listen should be aware that is the privacy consequence to that. So, obviously you think that through some people they're not comfortable with that and they would rather you know keep that away from the lawyer or away from those other locations and maybe that output descriptor is only backed up in a location that your family can see it something like that but you just have to also consider the trade-off of redundancy. Right the more copies of that out there the more redundancy and the easier it is for somebody to help recover in the case of that output descriptor information somehow being lost right because it's possible and we'd hate for people to lose access to the coins right so those is probably a few important points. Also I guess there's some of the more advanced stuff that's coming right so I didn't episode recently about mini script there's been some discussion about music too DC applications for any of this stuff or is it maybe a bit early? It is definitely a bit early but we are keeping close look at it and we are very excited with mini script and music too frost and stuff. It is definitely early because as you would appreciate there are there are situations not situations there are still cases in terms of when you're using a music too or you have interactivity involved there which is not really the best thing when it comes to security you don't want to really either bring the keys together or go to them multiple times right neither do you want to make them interact with each other so there are some uncertain problems in that space but you know a lot of amazing people are working towards it so that will probably get some sort sooner or later. The new script has been you know actually mini script has been around for a while now right and people often ask us so why not mini script yet why not mini script yet we have looked at mini script we have played at mini script but the practical aspect of it is to finish that mini script essentially generates a safe bitcoins right mini script is good is generated a safe bitcoins script however other than multi-sick the safe bitcoins chipset generates with multiple spending conditions and multiple ranchers and all that is really it doesn't really have that much of an important when it's a simple multi-sick that can be done without with a simple script but when it comes to multiple spending policies that is when really like like a two or three plus two or one or two plus time lock or you know some kind of a combination that is when mini script really comes to the four. Now to that right now but really there are three problems to it because toprooted still not you know toprooted on the music is still not there so so you wouldn't really be able to benefit that much from mini script right now as you would once these things are in place so the script can be used but it is not effective without these other factors right so once these factors are there and then there there is less interactivity and the harder what it's are you know able to showcase those policies on the small screen these are unsolved problems see it that is when mini script really be used so we are looking forward to those kind of development in the ecosystem so to be able to use these advanced features yeah and he thought on time locks as well because this is something where you know people love to I guess it's one of those areas where people love to philosophize and talk about you know this and that and now Bitcoin does have time locking like on-chain time locking but I think practical uses of that outside of let's say the smart contracting stuff like lightning which is a different you know kettle of fish here but in terms of multi-sig and stuff like that these are you seeing much interest in this or much practical use yeah absolutely there are a lot of people interested in them like there have been people okay are you able to do time lock are you going to do time lock is absolutely time lock here is something which we have done internally but the time lock and you know we spoke about the registration and how you verify the details and all that that particular piece is still not therefore time locks so you can implement time locks but you would you may not have a particular sending device supporting it now leisure is working towards it and we are working with leisure to see how we can implement it but essentially at this point in time there is no real hardware support for time locks right so you might have I think again from your podcast and otherwise we know that I think Liam is trying to use time locks but there is no sign device support for it and even if there is a sign in device support it will be without registration so you are losing how to have some security to have some security what we are trying to get to work with minister to know is trying to get to a situation where you don't have to lose security too much to gain time lock as a feature yeah totally fair I mean the security I mean the whole reason why we are using multi-sick to begin with is the security benefits so obviously we are not going to you know throw that out the window so yeah I think that is important so I guess a couple tips maybe we should leave listeners with just make sure when you are doing your multi-sick you keep it simple right like don't do something crazy don't don't sort of stay in the world trodden pathways I think there are good reasons to use the typical like two or three or three or five I think for most people unless you have a specific use case I think for most people two or three or three or five is probably going to be a good forum for people making sure you keep those backups as we mentioned the backup of the output descriptor or the BSMS I think those are important points to remember but yeah I guess do you have any other kind of tips on multi-sick before we finish that? I think it's just a quick TLDR and what we discussed like okay there are these three you know these two good configurations available and a lot of software voltage like keeper offer that so stick to that stick to that take backups test it out like they said test it out on multiple hardware hardware devices any devices and also test it or problem multiple coordinating software like Sparrow and keeper and Specter wallet and when you do that you will be so comfortable because you're seeing three different things telling exactly the same same balance in the same output so it will like yeah you know what I kind of plus this situation of the system that I bet so if you do these three these few things then you know multi-sick is not that yeah so I think I think it's worthwhile for a lot of people now certainly not for the beginners but I think for people who are let's say you're a long time bit coiner and you know you your stack is worth a reasonable amount it's worth your while right like I think people lose perspective sometimes right because they might be like someone who you know maybe bought some coins a few years ago or whatever and the prices run up and now they've got like you know over a million dollars worth of coin or let's say over twenty twenty five coins in like a single signature hardware wallet or hardware signing device or hardware signer and you know maybe it's time for you to think hey if you if you're holding you know over twenty or twenty five coins worth what's like a few hardware devices and some metal seeds that's nothing for you right like so it's it's important to think about the perspective yeah sorry I'm just on that point we did some you know back of them look at vision but like I said a typical multi-sick today cost five hundred right and let's say even if you have bit coins worth five thousand dollars which is probably you know a quarter of a bit coin a point to bit coin depending on the price that that will mean you know something around five to ten percent of the security cost nine in bitcoin you know that it can ten eggs very easily and if it does ten eggs then it will become like one percent of your one percent of your cost having a security cost of one percent to secure the whole amount is a decent security cost right so if you think about it in those terms and have you know put in some hours of effort actually like you know you have orders of magnitude better security and the cost is not really I it is one percent of the potential so that's that's probably one way to think about it yeah yeah okay so I think that's the multi-seag aspect let's talk a little bit about bitcoin for India so I unfortunately could make it last year because of clashes and stuff but I'm looking forward to being there off the top my head is October 14th of 15th I think yeah do you want to just give us an update on bitcoin for India? Absolutely so this is this is the community piece that some of us are involved in with other volunteers but more than happy to you know put it on this platform as well that you know stiffened a little bit person there and there will be many other bitcoiners who would be there who would be you know talking to blacks in India and talking multi-seag talking pastries talking a lot of stuff you know how to do how to do probably running a node so it will be a mixed conference like like it was the standard technical track and there will be a main track but we are we are very excited about it and we are obviously going to look for more and more participation this time from speakers and from audience so this is an October 14th of 10th of the data as a song. Fantastic and in Bangalore right and so I'm also you know it's been one year now like bitcoin it will it will it will have been you've already had the first conference you've been growing this meet-up network let's say of more committed bitcoiners and so hopefully there'll be a you know a growth in the community by then and who knows maybe there will be a lot of people joining the community between now and then so maybe they'll all be there as well so looking forward to that and yeah any any other points you wanted to mention before we finish off. No I think I think by the time this probably the the part goes out the keeper Apple would be available on mainnet till now it was on testnet it is still beta but it is available mainnet so it's very easy for people to test out so do give it a run try it out with small amounts of amounts of sats and give us some feedback it is an awesome product and we hope you love it. Fantastic okay and thanks for joining me. Thanks you for joining me. Cheers. I hope you found that discussion helpful and make sure to share this episode with any family of friends who are curious about setting up multi-signature and bitcoin security it's been a while since we've really walked through some of the details of this of course I have those earlier episodes with a range of people talking about these things I will include those in the show notes also but I think this one is a good overview episode for people who want to understand where things are at today with multi-signature so share the episode and the show notes are available at StefanLevera.com slash four five five thanks for listening and I'll see you in the sitters"}	{"title":"SLP455 Anant Tapadia - Single Sig or Multi Sig?","transcript_by":"masterchief164 via TBTBTC v1.0.0\\n","categories":"['podcast']","tags":"['multisig']","speakers":"['Stephan Livera', 'Anant Tapadia']","date":"2023-02-01","media":"https://anchor.fm/s/7d083a4/podcast/play/64348045/https%3A%2F%2Fd3ctxlq1ktw2nl.cloudfront.net%2Fstaging%2F2023-1-1%2Ff7fafb12-9441-7d85-d557-e9e5d18ab788.mp3","body":" Hi, you're listening to Stefan Le Verapodcast, a show about Bitcoin and Austrian economic expertise by Swan Bitcoin. Today we're exploring whether you should use single signature or multi signature for your bigger hotling stack. Now of course for day to day spending or certain specific scenarios you may not be thinking about multi-seek but here we're talking more about your hotling and my guest today is an art tapadea from Bit Hive and their team behind Hexawollet and recently Kipper. This show is brought to you by Swan Bitcoin, the easy way to buy Bitcoin and also learn about Bitcoin. Are you looking to add Bitcoin to your corporate balance sheet? It's never been easier with Swan Bitcoin, Treasury Solutions. With Swan Bitcoin Treasury, you can automate your Bitcoin investment, custody and management strategy and you will get expert guidance every step along the way. Now if you are operating a business and you have employees, consider Swan's Bitcoin benefit plan. So basically you can pick an amount and give that to your employees and this makes it easier for you to recruit reward, retain top talent. Swan handles all the heavy lifting like creating worlds, converting currency, routing payments and like magic your employees receive Bitcoin and world class financial education monthly as a benefit from you. So if you're interested go to swan.com slash business. On L2 is a community for Bitcoin builders by Blockstream. This is an initiative and community led effort by contributors and companies building on core lightning and the liquid network. It's an interactive community platform. So if you are a builder, whether you are a product manager, a designer or an engineer, you can come together through events. There will be mentorship programs available to fast track your success and also a community space to learn something new alongside other Bitcoin is building the future of Bitcoin layer two. Sign up now for early access on the platform. It's build on L2.com. Are you still using a plain old Block Explorer? Mimple.space shows you the multi-layer ecosystem of Bitcoin. Mimple.space is a comprehensive Bitcoin explorer that covers this ecosystem from the Mimple to the blockchain to secondly networks like the lightning network. With Mimple.space, there's no need to trust the third party. It's free and open source. You can host it yourself with one click on various full-node distributions. Now if you are with an enterprise, remember Mimple.space offers custom Mimple instances you can have your company's branding, increased API limits and so much more. Go find out over at mimple.space slash enterprise. And now onto the show with Unant. Anant, welcome back to the show. Yes, you've earned. Thanks for coming in. So there's been a lot going on. I think the conversation around learning to self-custodies always an important wine. It's always one that's very fresh on my mind as well. And so we're seeing a lot of discussion. I think recently of course there was the news about Luke Dashia losing his coins. I think I don't know exactly how many but probably something in the range of 200 Bitcoin. So a series of anacorn. And so there's been a lot of people making some noise about this statement. Right? They've been saying, oh, look, even if a Bitcoin core developer couldn't secure his coins and what hope does the average person have? They've been saying this kind of narrative. Of course, I disagree with that strongly. So I wonder how are you think about that? See, self-custody, I would not like to claim that self-custody is, you know, the mentally the easiest things to do. It is a new way to secure your stuff. So it is going to be, there are mental hurdles where people are trying to do it. There are going to be new things that people have to learn. And it does not come without self-responsibility. So no matter how developers and builders want to make it easier, it doesn't come without learning and it doesn't come without self-responsibility. Having said that and having understood that this is journey even five years done in the last event, we'll be talking about self-custody. And why self-custody, what other things can make self-custody more secure like them, any word proposal or any new, odd court people are proposing. So there will always be improvements in self-custody. And the new one, you can see words that we use, that was not obvious there. So what I'm trying to say is that the self-custody is a journey. There is no perfect self-custody solution. And also self-custody solution is very personal. So in case of specifically the incident you're talking about, it is very specific and a very, very niche case. It's not going to, it's to, it doesn't really, it is more for foot. It doesn't really apply to normal users. No one is going to probably have like a custom security solution like he had. It's almost non-issue for regular horrors. But he has there is an aspect of if a start questioning okay, is there self-custody solution proper? Is it, you know, there is something more than they can do about it and you know the whole conversation starts again. And this is going to happen again and again. But as you will me know and what I've understood from that situation, most of it was honestly, it is more preferred because I don't know if there was even a core storage gailing work, the way we term core storage air gap storage. So there are moving parts and it is a developing story. We don't know how the details are. So once we know all the details are fit, probably there will be some learnings out of it. But we already know that you know you shouldn't roll your own self-custody solution to be being stuff that is very custom-pre- yourself and it is not really something with people who have used and tried and have to be not tried and tested. So these are the few things that you can already talk about that incident. So to the whole question around should people self-custody, what we end up having is a lot of conversation around what is the best way, right? We see people saying, oh just, you know, multi-signature is too complex. People say things like you should only do single signature with a pass phrase. That seems to be if I had to assess, let's say the meta on Bitcoin Twitter or online discussion, that seems to be the meta. They say, oh multi-sign, it is in the too hard basket for most people. Obviously, I disagree again. I think it is more like, you know, if you are a beginner, you should use maybe a guided solution, like have a professional help you. And intermediates and advanced level people you can learn. It is not that hard. I'm saying it. I'm curious how you see it, like single signature or multi-signature. See, we first of all, as you know, RSTs have been making the Bitcoin products for a while and we come from a single-signature word. Exhausted is a single-signature solution. It has all the aspects of typical-signature solution or what a wallet does. And we can come to the deconstruction of the wallet which will probably really help some of the listeners. But essentially, we come from that space. So definitely a very neat solution for people who are just getting started or people who have, you know, you know, small amount of money, obviously that is subjected. But essentially, you know, not like life savings or stuff . They will ship you some hardware devices if you need them and they will do a call with you and walk you through that process. An unchained have a really easy platform to use, which is perfect for you if you are a beginner and you just need some help to guide you through this process. They also have an inheritance checklist which comes as part of the concierge onboarding program so this can help you in terms of having things like a step-by-step checklist, letters for the executor or trustee and other things. Go to unchained.com slash concierge to get this. And finally, coincites.com, are my favorite producer of hardware signing devices. Most notably the cold card, but they have a range of products and gear that you will find really handy. With the cold card obviously it's one of the most popular Bitcoin hardware signing devices. You can use it in single signature or you can use it as part of a multi signature and it has all these features that really make it easy for you to do that. So you can register the multi signature forum. You can check the addresses on the device which gives you some more security. You can initialise the whole thing offline without even connecting to a computer. So there's so many features and it's such a reliable and versatile player that you can use as part of your Bitcoin security setup. Go to coincite.com, audio-cold cards and other gear there. Use code Lavera and you'll get a discount on your cold cards. Now back to the show. Yeah, I guess it's just an extra layer of verification, right? And certainly these are things that you do when you set up your multi-seagrant. And so I think this is a great way for people to give themselves that piece of mind as well because this is one of those things that's really kind of crazy but it's this idea that the keys can be ported are portable in a way that you can take the key like theoretically. I could have set up that same key in like a treasure but then imported into a cold card and it's going to sign the same way. It's going to sign the same coins in a way. So that's kind of useful and that's a step that people are doing to help verify. Okay, my access to my coins is, you know, or another one that people might do is do a test recovery, right? Like let me send you know $30 into this multi-seagrant and then just practice, oh I've lost one of the devices or I've lost this other thing, can I recover? You know, have I have I have the right pieces together to be able to recover? If something goes wrong and then this can give you that extra piece of mind. Okay, I was able to recover. Okay, I'm safe, right? That. And the best part is if you notice that every single user doesn't have to do this, if a lot of users have done it initially or you know some users do it regularly, then if any of these pieces, if any one of the coordinating software, any one of the hardware devices trying to do something funny, they'll be caught. So the incentive to actually try and steal funds when there are a lot of entities involved is actually reduced. So this is the very, very key part, see one of the things in Bitcoin we know is the securities also because of the numbers, right? Because there are so many private keys possible, it's not easy to guess them. It is not the same scale but the idea is if you have multiple entities, then you can minimize trust in any one of them. You don't need to test a-card endings of the user, no the one. I don't need to use a signing device, I can use another one, right? So as these things develop and we have like 12 or 13 signing devices available now of S5 or 6 coordinate or apps available now. So this becomes easier and easier and people will get more and more confident about it. There's a lot more talking about it, lot more education that includes about it, people who are listening to this podcast might come back with questions, they might feel slightly more comfortable. So things are converging with standard with the ecosystem and the education and I'm like you're like you're a server, I'm also a very bullish on policy. Yeah, yeah and so let's talk about spending now. So let's say I've set up my 203 and now I want to send some coins to you on our. So I say I'm asking me an address, I'm going to pay you you know 0.01 Bitcoin or whatever, what steps do I go through? Perfect. So if I give you an address and you have a two or three month as accept, the first thing to do is to check that address, I probably have you know I'm showing it showing it to you on a screen or I have you know message you that particular address. So when you when you put that address in your coordinating software and the coordinating software would probably take you know produce a B.S.B.T transaction, you would take it to your first hardware device. On that hardware device, the first thing is to make sure that you check whether that send to addresses character or not. That's the first step. The like I said, the change addresses automatically checked if that particular device is registered. Okay. So these are the two checks that happen during sending, if all the device are registered. So all you have to do because they're successfully registered. If you have chosen the right wallet from the from the signing device, then these are the these are the checks that happen. And I think maybe it's also so obviously in this case it's a two or three. So I'd have to go and let's say I have one device at home and then another device in a vault or some other location somewhere, I have to go to that other location and do a get the signature from that device or from that signing device to get the second signature, bring that back to you know the coordinating application. So in this case if it's cheaper or Spector or Sparrow or whatever and then once I've ingested that second PSBT signature, then it'll say, ah, this transaction is now valid and you can broadcast it, right? Absolutely. Yeah. I think you have to explain the user steps really well. So those are the checks that happen at one place, but then you take it to another location. The same kind of check you can do there. You can check there a saving address at your own office or any other location you have. Then you put it back to the coordinating software, not the coordinate software, because a specific transaction has been same and there's no way to further coordinating out because it doesn't have the private keys to change it. You can let the coordinating app, you know, broadcast the transaction. Right. And I think one other point just on practicality that might be useful for some people. I think I've been because I've been playing around with devices for years, right? So I think for me in practice I have found there are times where QR's can be difficult, right? So because the QR flow, like as an example, if your it depends on the device you're using, sometimes the resolution is bad or the the camera on the other devices bad. And so one tip that I've found useful is if you can have the QR scanning device, that could be maybe your home device. And then if you've got like one that's in a vault, as an example, and you might have a mix, right? You might have a mix in your core, and so then the devices in the vault maybe they can be a little bit easier to have a microSD for signing because they are a little, I think it depends on the flow, right? It depends on the coordinating app and everything, but if you just have a microSD card and you're just going into the vault area or into an office or somewhere, then maybe it's a little easier to kind of get the signature done because if you're kind of out in a remote location and you're trying to scan the QR and the signature is not working and things like this where it can be a bit difficult, right? So I think in that case it might be a little easier. Now of course there is NFC as well, so there's NFC devices, things like the the tap signer is an example, but I guess there is one downside with devices like the tap signer is you're getting less, yeah, because you can't check the addresses on this thing, you can't, there's less that you can check about the transaction. So, you know, there's tradeoffs with all of these things, it is a cheaper device, but I guess if you're storing serious, serious money, well then maybe you're going for the device, the bigger devices with a screen and with a keypad and things like this. So those are a few tips I guess that I would just offer for listeners as well, when you're thinking about if you're crafting your own multi-seg. Yeah, okay, so let's talk a little bit about the backups and the output descriptor and BSMS, can you decipher a little bit of this, at least, current state of play as we talk, you know, today's the 31st of January 2023, what's the current state of play with multi-seg and backups? See one thing, even I want to mention because it's a very important point, when you are keeping something in the shape, and you want to use as decar versus QR code, one of the things people forget is some of these devices used to not have a battery, right? So what you don't want to do is actually get that device back into your home and then do this stuff and then take it back, right? So if you have it in a safe, it is not about idea either that, you know, most of the new devices, that's where they have some kind of battery, the new ledgers, the G8, they have battery, or if you have like cold card, that requires a battery, this is not a battery, you just carry the battery with you. So carry the battery and as you can see, you can see, you can see, you know, just do the piece there, either through QR code or SD card and then come back, do not carry the sign, you don't have to carry the sign and do it back, you can keep it back to you. Right, yes, so just to explain there, so the idea here is let's say we've got a two or three multi-seag and just doing like a big amount of coin on this or whatever, the whole point is to not have to have like, okay, yes, at the start, when you set up that core, yes, all three devices can be in the same location because you haven't put any coins on there, but once you put coins on, then you don't want to bring them back together because theoretically you're vulnerable at that point, right? Like if a criminal or a someone comes to, you know, try to attack you at that point, you're vulnerable. Yes, even at creation actually because the way P is between multi-seagors is not really interactive that is, you can actually not have them at the same location, they need one of them. Right, yeah, of course, yeah, so you can do one important, you know, so it's one important, you know, one of the other, yeah, I mean, I was just saying more from a practicality because you might want to let's say you want to set it up and then test recovery, test with small amounts, before you separate the devices and put them into, you know, different locations, one in the mountain, one in the, you know, one in the vault, one in the office, one in the, you know, somewhere, so I think that's probably where I was saying that just from a practicality point of you, but then once they, once you put the coins on there, like serious coin on there, then you don't want to pull them together because now, you know, that's where the risk is. So anyway, we're spoken about that. Let's get back to the backup question. So, you know, typically this means you save a PDR for an output descriptor or BSMS, he tells what's the current state of play there. Yeah. So, so why do we need these, these output descriptors or work competitions because even if you have two of the three keys, you cannot recover your phone, right? I just want to repeat that in a multi-sick, if you let's say in a three or five multi-sick, it doesn't mean that if you have three of the five keys, you can completely, you can not completely, you cannot even recover any of your funds. The reason being is that, okay, you have the three keys to the safe, let's imagine another safe, right? So, you have three keys of the safe and you can open the safe, but how do you find that safe, right? How do you get to that safe? That is the map, you know, in that terms, is what the word configuration is and that word configuration or the multi-sick configuration finds contains the map details that it's basically contained, the other public details of the key that you would need to unlock your funds basically or get access to your funds. Just just to want to be clear why multi-sick configuration finds are so important. Now, that is where things like output descriptors and you know, BSMS and all these things come through. So, output descriptor is it's a very neat standard, it takes care of all the different aspects of what a configuration means. Configuration doesn't just mean the expo, also means the path and the script type that you're using and start writing them, right? So, that is what forms output descriptor in a simple sense, I'm not getting into time login multi-sick yet, but that's an output descriptor. And if you have the output descriptor and if you have the minimum number of keys, you can definitely access the funds. If you have three keys of the file, and you have the multi-sick configuration file or output descriptor, you do not need the other two keys. That's the importance of it. I'll put descriptor as a format, which a lot of wallets use. Now, there are like as a there are multiple pieces in there, like the expo of the path, the you know master fingerprint, the script type. So, these are the part of output descriptor. I would say an improvement to that is the BSMS, which is bit coin, secure, multi-sick setup, I think, but BSMS essentially has the output descriptors given a specific output descriptor template, but it also has some other details. One very neat detail that BSMS has is actually it has the first address of the multi-sick, right? I really like this part and why that is important. So, let's imagine you have these five devices. One of the option after registration is you go away and check all these five devices for all the expobs, all the paths and all the derivations in this and that. There's one we are going it. But, alternatively what you could do is you could, if it's a normal multi-sick, you can just check the first address, right? Because the first address is a derivation of all these components. So, if the first address is correct, or is it it's matching across the five devices, then there is no way they could have changed one of the expobs, or they could have changed one of the paths because they will not get the first receiving address. So, by checking one piece, you have to check, you have actually checked multiple of these, multiple of these items, right? As you were mentioning, the BSMS has the first address and so you were saying that basically because the first address has to be the same, then it's I guess you're saying that's the reason why you find it useful as a wallet developer when you're coding or making and building this, right? Even from a user point of view, instead of checking for like five different things, you have to check all the cosine and expobs, so you have to check five expobs, plus they'll have to check the five derivation paths, plus they will have to check the five you know script types, because any of this going wrong, where you mean that it's a completely different world. So, if instead of that what you could do, in a simple case, there are complex case where there doesn't apply, but in a simple case what that means is if you would check the first address, you essentially have to check all the input parameters to the first address. So, if I check this one address across the five device, I know it is the right registration. So, these are the kind of you know improvement that are happening from a standard point of view, and that is why I said the general standards are leading the world's better UX in the multi-six space. I say, yeah, okay, and so let's talk a little bit about capabilities specifically, let's talk a little bit about some of the, sorry, one other thing. So, with this whole output descriptor BSMS, I guess the important point just for people to remember is that you can keep multiple backups of this. Now, yes, it impacts your privacy, but it helps your redundancy and your ability to recover something goes wrong. So, this piece, this output descriptor, the BSMS, the wallet configuration file, whatever it's called, make sure you have multiple backups of that. You might even think about having a copy of that with your lawyer or someone who you're doing inheritance planning with because it'll be a central as part of the recovery process there. So, that's just something to keep in mind. One more thing you could prove in those files is which is very practicalist. If you have the same devices, let's say in a safe, you can keep a copy there. If you have like three devices in three safe, in three different locations, this keep one copy with each of them. So, even if you carry USB, one I mean, yeah, or you can just like have it in an PDF or something. So, that seeds that's nothing for you right like so it's it's important to think about the perspective yeah sorry I'm just on that point we did some you know back of them look at vision but like I said a typical multi-sick today cost five hundred right and let's say even if you have bit coins worth five thousand dollars which is probably you know a quarter of a bit coin a point to bit coin depending on the price that that will mean you know something around five to ten percent of the security cost nine in bitcoin you know that it can ten eggs very easily and if it does ten eggs then it will become like one percent of your one percent of your cost having a security cost of one percent to secure the whole amount is a decent security cost right so if you think about it in those terms and have you know put in some hours of effort actually like you know you have orders of magnitude better security and the cost is not really I it is one percent of the potential so that's that's probably one way to think about it yeah yeah okay so I think that's the multi-seag aspect let's talk a little bit about bitcoin for India so I unfortunately could make it last year because of clashes and stuff but I'm looking forward to being there off the top my head is October 14th of 15th I think yeah do you want to just give us an update on bitcoin for India? Absolutely so this is this is the community piece that some of us are involved in with other volunteers but more than happy to you know put it on this platform as well that you know stiffened a little bit person there and there will be many other bitcoiners who would be there who would be you know talking to blacks in India and talking multi-seag talking pastries talking a lot of stuff you know how to do how to do probably running a node so it will be a mixed conference like like it was the standard technical track and there will be a main track but we are we are very excited about it and we are obviously going to look for more and more participation this time from speakers and from audience so this is an October 14th of 10th of the data as a song. Fantastic and in Bangalore right and so I'm also you know it's been one year now like bitcoin it will it will it will have been you've already had the first conference you've been growing this meet-up network let's say of more committed bitcoiners and so hopefully there'll be a you know a growth in the community by then and who knows maybe there will be a lot of people joining the community between now and then so maybe they'll all be there as well so looking forward to that and yeah any any other points you wanted to mention before we finish off. No I think I think by the time this probably the the part goes out the keeper Apple would be available on mainnet till now it was on testnet it is still beta but it is available mainnet so it's very easy for people to test out so do give it a run try it out with small amounts of amounts of sats and give us some feedback it is an awesome product and we hope you love it. Fantastic okay and thanks for joining me. Thanks you for joining me. Cheers. I hope you found that discussion helpful and make sure to share this episode with any family of friends who are curious about setting up multi-signature and bitcoin security it's been a while since we've really walked through some of the details of this of course I have those earlier episodes with a range of people talking about these things I will include those in the show notes also but I think this one is a good overview episode for people who want to understand where things are at today with multi-signature so share the episode and the show notes are available at StefanLevera.com slash four five five thanks for listening and I'll see you in the sitters"}	slp455 anant tapadia - single sig or multi sig?hi, you're listening to stefan	queued	\N	2023-04-19 13:45:29.038+00	2023-04-19 13:45:29.038+00	\N
2	{"title":"James Chiang, Schnorr and Taproot - Chaincode Residency Demo Day","transcript_by":"adamjonas via TBTBTC v1.0.0\\n","categories":["podcast","video"],"tags":"None","speakers":["James Chiang"],"date":"2023-03-03T14:30:19.710Z","media":"https://www.youtube.com/watch?v=VAJT8TPfpcs","body":" Hello everyone, my name is James. Thanks for coming all today to support OpenSource Bitcoin. I'd like to talk about what I was on this summer. I worked on Tapirt and a privacy toolkit for developers. So I'm based in Zurich. I'm U.S. Board, I'm a Japanese parent and I spend a good part of my life in Switzerland. I first learned about Bitcoin when my mom got access hacked in 2014. Back then, none of my friends in Tokyo could tell me what Bitcoin was that has changed quite a bit since then, but come a long way. I learned Bitcoin by building a lot of mini projects to learn about what transactions are our testnet, what kind of P2B messages exist and how the protocol works, and like basic payment channels. I learned all this stuff by building these little small projects. And these projects eventually grew into a full Bitcoin developer course. And that's what I teach today at 21 lecturers. I'm a coach writer with UNESCO and Christian Decker. These are a long time core contributors. And for those who can't come, I have an online class at teachbecoin.io. Why teach part of the curriculum over the fourth week period online? The people who come to this course are developers from exchanges, Bitcoin ATMs, Bitcoin Wall manufacturers, and it's pretty cool because these guys work with Bitcoin every day, but they mostly interact with Bitcoin via the RPC interface. And this has actually spend a couple of days building on top of the protocol directly, is pretty cool. I'm very fond of it. So I enjoy that a lot. I'm also a contributor to Libcoin. Libcoin is a C++ Bitcoin library, and it provides a lot of the low-level libraries and modules for somebody to get smart about the Bitcoin protocol. If we're Bitcoin, I worked at a couple of startups. I'm a co-founder of a full-level take simulation company. I've also worked in data science. I started on my career at NASA at the Jet Propulsion Lab in Pasadena. And I think there's some parallels and experts that had there with Bitcoin, namely, the design process is extremely rigorous. You have a lot of mission-critical components. And I see that happening in Bitcoin as well, where you have a lot of people reviewing every little change, except that happens online and not in a conference room. Okay, so why is Bitcoin important to me? Bitcoin is important to me because I believe it became apparent to me that the ports of Bitcoin really is in its role as an alternative, right? Not more, not less. And it can only be an alternative money if a remains censorship resistant as a technology as an open-source project. It cannot work without privacy. If the actors in the system are not anonymous, they can be attacked. So this is something that I believe is extremely important to the success of the Bitcoin project in the long term and something that I really wanted to work on. And fortunately, Bitcoin is just sort of private today. It's not very private, right? Like the chain analysis tools, as you probably all know, have become very sophisticated, they're very strong here, risks to be able to determine Bitcoin ownership, Bitcoin Tain. And together with KYC, they're kind of risks by circuiting the system into a white and black market part. So that's not good. We do have some kind of measures like coin-joint, coin-joint is useful, but it's relative expensive. And anonymity said it's not guaranteed. You don't really know who you're mixing with, obviously. There is some more advanced privacy tech. A lot that's happening in cryptography. But a lot that may be in research phase is very complex. So we'll take a lot of time before it makes itself a waste. We do have layering protocols like lightning that have been pretty successful than having a lot of traction. But the thing with layering protocols is that they rely on contracting protocols, which once dropped on chain can be correlated and are visible to the public. So that's something that we can improve. So this is where Schmoren Tapper would make a big difference in terms of privacy. These are proposals, two proposals, together with Tapper script three proposals, which are written by Peter Willey with the help of a lot of other contributors. And in terms of privacy, they bring two important things. Firstly, indistinguishable contracts. That means we have outputs which are a lock by different spending conditions, but to the observer on chain, they look like regular puppies. And therefore indistinguishable. Tapper introduced the ability to hide complex script structures into a puppy. So in that sense, they are hidden from the observer on chain. And these are both huge privacy wins for Bitcoin. But it is Bitcoin after all. So changes require consensus. So people users will need to use them. Developers will need to support the upgrade. And so requires some kind of socialization in the community for Schmoren Tapper to actually be activated. And I think what I wanted to work on this summer is to provide an accessible way for a developer to do that. And today we don't have easy to use toolkits for a developer to immediately build on top of Schmoren Tapper. So that's what I did. So this is my project. It's a developer toolkit built on top of Bitcoin Core. Specifically, it's a Tapper Grange written by Peter Willey. The Tapper consensus is already implemented. But there is only very thin shnore and Tapper class layer in the original branch. So what I've done is expanded with modules like Music, Adaptorsix, Discrete Law Contracts, and Tapper classes, which allow the user to actually experience how to give the user the tools to build very private protocols without having to read the paper, build their own implementation, from scratch, from just Tapper and Shnore. So to demonstrate what a developer can do with the library, I like to show some examples. So the first examples are our indistinguishable contracts. These are basically primitives which are a power-bushnore. The first one is Music. So today, a multi-sick spend or an output, that's a very observable on-chain because they're multiple puppies that are visible. Music allows us to aggregate these puppies so that on-chain, a single puppy is only visible. Singles were signing when this puppy is spent. The signatures from the multiple parties can be aggregated, and the only single signature is dropped to chain. So from the on-chain observer, point of view, this looks like a regular single spend transaction. So the anonymity set becomes much larger, even though it's actually a multi-sick-nature contract. Another useful tool for privacy or atomic swaps. So atomic swaps are when two users swap coins without anybody else knowing. They're by obscuring the coin ownership. If we want to do that today, however, it requires a hash-based system, or a hash-bed output, which means that a transaction requires a secret pre-image to be spent, and that pre-image then is used in the second transaction. Where the funds are being exchanged. And because the pre-image needs to be dropped on-chain in the witness, these two transactions can be correlated by any on-chain observer. So that's not good for privacy, obviously. With Schnor and adapter signatures, we can do much better. So adapter signatures always are forms, signature pairs with regular signatures, and the correlating secret is hidden within. So you can see in the first transaction where A is in to B, be signature together with the adapter signature releases a secret off-chain, and the second user can then use that secret to reconstruct the signature, here she needs, to conduct the second transaction, thereby completing the swap. So we swapped coin owners, and we've done it in a way where these two transactions are completely uncorrelated on-chain. So that's great from the privacy point of view. Schnor also enables new features, new contracting features, which were impossible before. So in this case, we want to have different contracts or puppies. Execute only if an off-chain Oracle creates the corresponding signature. So say Oracle signs B that A. That signature allows signature one to be created, which spends pub key one, but not for pub key two, and not for pub key three. If the Oracle signs for event B, the second pub key can execute. If Oracle signs for C, the third. So this allows us to bring trusted off-chain information onto on-chain script execution. Again, in a way which is observable by the on-chain observer, they just look like regular single-spend transactions. So this can part of the toolkit is around taproot. Taproot means we can hide Bitcoin script in a very nice way. So let's first consider how Bitcoin scripts work today. This is, I think, recognized in the HLC. HLCs are used to forward payments and lightning, and an HLC needs to encapsulate quite a bit of, you know, spending logic. The first one is the success case. So the forwarding payment has been successfully delivered. This is the part of the execution of the script that is actually executed, highlighted in orange. The forwarding attempt can also fail. You can time out and need to be reversed. And that's the case where this part of the script is being executed. And finally, the state of the channel can be updated where the HLCs must be revoked, and that executes, again, another part of the script. So every time these scripts are actually dropped on chain, the entire contract is revealed revealing quite a bit of information, which can be correlated to de-anonymize users of the lightning network. So we can do better. With a taproot toolkit, the user now doesn't need to worry about Bitcoin script. It simplifies things quite a bit. The user only needs to worry about the different spending conditions. The first one being success, the pub key and a hash, the second one being a timeout, pub key and a time. And the third one being revocation, where we just need a revocation key. The different spending paths are only revealed if that scenario occurs. So you can see in the timeout scenario, it's this branch, in the revocation scenario, it's this branch, and only a proof of that branch needs to be broadcasted on chain. And everything else remains secret and private. So the goal here is to provide the developer with a basic highly-relevel language. We can introduce tap script descriptors, so that they even have to worry about Bitcoin script, and can actually just implement the kind of contracting logic that they want together with the utilities like the tree solver, which generate the tree structure for more complex taproot outputs. So you can see the privacy design space has really been open up quite a bit with which North and Taperot, and that's really a huge win. However, this stuff takes time. I think if there's something that we learn with segway is that the socialization of a new soft fork is really something that needs engagement of the community. And in the meantime, Taperot itself takes time before it's actually integrated into Bitcoin core fully. In the meantime, in this period of time, developers need tools, which allow them to easily and assessably start using the power of story in Taperot to build protocols and applications, prototypes, and Taperot's uptake has been a great supporter of this project this summer. We will be using this library to deliver two workshops and coming weeks where we teach taproot and Shnor to the developers in the Bitcoin industry. For myself, I really look forward to being part of this process to bring Taperot and Shnor to activation. One of the things that I really want to look on in contribute to as well is implementing the technology into other parts of Bitcoin core like the world which will eventually destroy as a reference client implementation for the wider community."}	{"title":"James Chiang, Schnorr and Taproot - Chaincode Residency Demo Day","transcript_by":"adamjonas via TBTBTC v1.0.0\\n","categories":"None","tags":"None","speakers":"None","date":null,"media":"https://www.youtube.com/watch?v=VAJT8TPfpcs","body":" Hello everyone, my name is James. Thanks for coming all today to support OpenSource Bitcoin. I'd like to talk about what I was on this summer. I worked on Tapirt and a privacy toolkit for developers. So I'm based in Zurich. I'm U.S. Board, I'm a Japanese parent and I spend a good part of my life in Switzerland. I first learned about Bitcoin when my mom got access hacked in 2014. Back then, none of my friends in Tokyo could tell me what Bitcoin was that has changed quite a bit since then, but come a long way. I learned Bitcoin by building a lot of mini projects to learn about what transactions are our testnet, what kind of P2B messages exist and how the protocol works, and like basic payment channels. I learned all this stuff by building these little small projects. And these projects eventually grew into a full Bitcoin developer course. And that's what I teach today at 21 lecturers. I'm a coach writer with UNESCO and Christian Decker. These are a long time core contributors. And for those who can't come, I have an online class at teachbecoin.io. Why teach part of the curriculum over the fourth week period online? The people who come to this course are developers from exchanges, Bitcoin ATMs, Bitcoin Wall manufacturers, and it's pretty cool because these guys work with Bitcoin every day, but they mostly interact with Bitcoin via the RPC interface. And this has actually spend a couple of days building on top of the protocol directly, is pretty cool. I'm very fond of it. So I enjoy that a lot. I'm also a contributor to Libcoin. Libcoin is a C++ Bitcoin library, and it provides a lot of the low-level libraries and modules for somebody to get smart about the Bitcoin protocol. If we're Bitcoin, I worked at a couple of startups. I'm a co-founder of a full-level take simulation company. I've also worked in data science. I started on my career at NASA at the Jet Propulsion Lab in Pasadena. And I think there's some parallels and experts that had there with Bitcoin, namely, the design process is extremely rigorous. You have a lot of mission-critical components. And I see that happening in Bitcoin as well, where you have a lot of people reviewing every little change, except that happens online and not in a conference room. Okay, so why is Bitcoin important to me? Bitcoin is important to me because I believe it became apparent to me that the ports of Bitcoin really is in its role as an alternative, right? Not more, not less. And it can only be an alternative money if a remains censorship resistant as a technology as an open-source project. It cannot work without privacy. If the actors in the system are not anonymous, they can be attacked. So this is something that I believe is extremely important to the success of the Bitcoin project in the long term and something that I really wanted to work on. And fortunately, Bitcoin is just sort of private today. It's not very private, right? Like the chain analysis tools, as you probably all know, have become very sophisticated, they're very strong here, risks to be able to determine Bitcoin ownership, Bitcoin Tain. And together with KYC, they're kind of risks by circuiting the system into a white and black market part. So that's not good. We do have some kind of measures like coin-joint, coin-joint is useful, but it's relative expensive. And anonymity said it's not guaranteed. You don't really know who you're mixing with, obviously. There is some more advanced privacy tech. A lot that's happening in cryptography. But a lot that may be in research phase is very complex. So we'll take a lot of time before it makes itself a waste. We do have layering protocols like lightning that have been pretty successful than having a lot of traction. But the thing with layering protocols is that they rely on contracting protocols, which once dropped on chain can be correlated and are visible to the public. So that's something that we can improve. So this is where Schmoren Tapper would make a big difference in terms of privacy. These are proposals, two proposals, together with Tapper script three proposals, which are written by Peter Willey with the help of a lot of other contributors. And in terms of privacy, they bring two important things. Firstly, indistinguishable contracts. That means we have outputs which are a lock by different spending conditions, but to the observer on chain, they look like regular puppies. And therefore indistinguishable. Tapper introduced the ability to hide complex script structures into a puppy. So in that sense, they are hidden from the observer on chain. And these are both huge privacy wins for Bitcoin. But it is Bitcoin after all. So changes require consensus. So people users will need to use them. Developers will need to support the upgrade. And so requires some kind of socialization in the community for Schmoren Tapper to actually be activated. And I think what I wanted to work on this summer is to provide an accessible way for a developer to do that. And today we don't have easy to use toolkits for a developer to immediately build on top of Schmoren Tapper. So that's what I did. So this is my project. It's a developer toolkit built on top of Bitcoin Core. Specifically, it's a Tapper Grange written by Peter Willey. The Tapper consensus is already implemented. But there is only very thin shnore and Tapper class layer in the original branch. So what I've done is expanded with modules like Music, Adaptorsix, Discrete Law Contracts, and Tapper classes, which allow the user to actually experience how to give the user the tools to build very private protocols without having to read the paper, build their own implementation, from scratch, from just Tapper and Shnore. So to demonstrate what a developer can do with the library, I like to show some examples. So the first examples are our indistinguishable contracts. These are basically primitives which are a power-bushnore. The first one is Music. So today, a multi-sick spend or an output, that's a very observable on-chain because they're multiple puppies that are visible. Music allows us to aggregate these puppies so that on-chain, a single puppy is only visible. Singles were signing when this puppy is spent. The signatures from the multiple parties can be aggregated, and the only single signature is dropped to chain. So from the on-chain observer, point of view, this looks like a regular single spend transaction. So the anonymity set becomes much larger, even though it's actually a multi-sick-nature contract. Another useful tool for privacy or atomic swaps. So atomic swaps are when two users swap coins without anybody else knowing. They're by obscuring the coin ownership. If we want to do that today, however, it requires a hash-based system, or a hash-bed output, which means that a transaction requires a secret pre-image to be spent, and that pre-image then is used in the second transaction. Where the funds are being exchanged. And because the pre-image needs to be dropped on-chain in the witness, these two transactions can be correlated by any on-chain observer. So that's not good for privacy, obviously. With Schnor and adapter signatures, we can do much better. So adapter signatures always are forms, signature pairs with regular signatures, and the correlating secret is hidden within. So you can see in the first transaction where A is in to B, be signature together with the adapter signature releases a secret off-chain, and the second user can then use that secret to reconstruct the signature, here she needs, to conduct the second transaction, thereby completing the swap. So we swapped coin owners, and we've done it in a way where these two transactions are completely uncorrelated on-chain. So that's great from the privacy point of view. Schnor also enables new features, new contracting features, which were impossible before. So in this case, we want to have different contracts or puppies. Execute only if an off-chain Oracle creates the corresponding signature. So say Oracle signs B that A. That signature allows signature one to be created, which spends pub key one, but not for pub key two, and not for pub key three. If the Oracle signs for event B, the second pub key can execute. If Oracle signs for C, the third. So this allows us to bring trusted off-chain information onto on-chain script execution. Again, in a way which is observable by the on-chain observer, they just look like regular single-spend transactions. So this can part of the toolkit is around taproot. Taproot means we can hide Bitcoin script in a very nice way. So let's first consider how Bitcoin scripts work today. This is, I think, recognized in the HLC. HLCs are used to forward payments and lightning, and an HLC needs to encapsulate quite a bit of, you know, spending logic. The first one is the success case. So the forwarding payment has been successfully delivered. This is the part of the execution of the script that is actually executed, highlighted in orange. The forwarding attempt can also fail. You can time out and need to be reversed. And that's the case where this part of the script is being executed. And finally, the state of the channel can be updated where the HLCs must be revoked, and that executes, again, another part of the script. So every time these scripts are actually dropped on chain, the entire contract is revealed revealing quite a bit of information, which can be correlated to de-anonymize users of the lightning network. So we can do better. With a taproot toolkit, the user now doesn't need to worry about Bitcoin script. It simplifies things quite a bit. The user only needs to worry about the different spending conditions. The first one being success, the pub key and a hash, the second one being a timeout, pub key and a time. And the third one being revocation, where we just need a revocation key. The different spending paths are only revealed if that scenario occurs. So you can see in the timeout scenario, it's this branch, in the revocation scenario, it's this branch, and only a proof of that branch needs to be broadcasted on chain. And everything else remains secret and private. So the goal here is to provide the developer with a basic highly-relevel language. We can introduce tap script descriptors, so that they even have to worry about Bitcoin script, and can actually just implement the kind of contracting logic that they want together with the utilities like the tree solver, which generate the tree structure for more complex taproot outputs. So you can see the privacy design space has really been open up quite a bit with which North and Taperot, and that's really a huge win. However, this stuff takes time. I think if there's something that we learn with segway is that the socialization of a new soft fork is really something that needs engagement of the community. And in the meantime, Taperot itself takes time before it's actually integrated into Bitcoin core fully. In the meantime, in this period of time, developers need tools, which allow them to easily and assessably start using the power of story in Taperot to build protocols and applications, prototypes, and Taperot's uptake has been a great supporter of this project this summer. We will be using this library to deliver two workshops and coming weeks where we teach taproot and Shnor to the developers in the Bitcoin industry. For myself, I really look forward to being part of this process to bring Taperot and Shnor to activation. One of the things that I really want to look on in contribute to as well is implementing the technology into other parts of Bitcoin core like the world which will eventually destroy as a reference client implementation for the wider community."}	james chiang, schnorr and taproot - chaincode residency demo dayhello everyone, my name is	queued	\N	2023-04-19 13:48:44.216+00	2023-04-19 13:48:44.216+00	\N
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.users (id, "githubUsername", "authToken", permissions, "archivedAt", "createdAt", "updatedAt") FROM stdin;
1	sipa	\N	reviewer	\N	2023-03-08 13:42:08.699+00	2023-03-08 13:42:08.699+00
2	murch	\N	admin	\N	2023-03-08 20:26:19.28+00	2023-03-08 20:26:19.28+00
4	nully0x	\N	reviewer	\N	2023-04-13 12:09:28.248+00	2023-04-13 12:09:28.248+00
5	adamjonas	\N	reviewer	\N	2023-04-13 20:13:38.156+00	2023-04-13 20:13:38.156+00
6	BalogunofAfrica	\N	reviewer	\N	2023-04-17 13:26:44.405+00	2023-04-17 13:26:44.405+00
\.


--
-- Name: reviews_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.reviews_id_seq', 1, false);


--
-- Name: transcripts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.transcripts_id_seq', 3, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 1, false);


--
-- Name: reviews reviews_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT reviews_pkey PRIMARY KEY (id);


--
-- Name: transcripts transcripts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transcripts
    ADD CONSTRAINT transcripts_pkey PRIMARY KEY (id);


--
-- Name: transcripts transcripts_transcriptHash_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transcripts
    ADD CONSTRAINT "transcripts_transcriptHash_key" UNIQUE ("transcriptHash");


--
-- Name: users users_authToken_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT "users_authToken_key" UNIQUE ("authToken");


--
-- Name: users users_githubUsername_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT "users_githubUsername_key" UNIQUE ("githubUsername");


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: reviews reviews_transcriptId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT "reviews_transcriptId_fkey" FOREIGN KEY ("transcriptId") REFERENCES public.transcripts(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: reviews reviews_userId_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.reviews
    ADD CONSTRAINT "reviews_userId_fkey" FOREIGN KEY ("userId") REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- Name: transcripts transcripts_archivedBy_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.transcripts
    ADD CONSTRAINT "transcripts_archivedBy_fkey" FOREIGN KEY ("archivedBy") REFERENCES public.users(id) ON UPDATE CASCADE ON DELETE SET NULL;


--
-- PostgreSQL database dump complete
--

